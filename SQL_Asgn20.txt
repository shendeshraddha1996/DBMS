Q1. Which of these views are updateable (will allow DML operations)?
	#1 Create View Dailyorders
	as Select Distinct cnum, snum, onum, odate from Orders;
==> 	Yes

	#2 Create View Custotals
	as Select cname, Sum (amt) Sum_Amt from Orders, Customers
	where Orders.cnum=Customers.cnum
	Group by cname;
==>	Not updatable

	#3 Create view Thirdorders
	as Select * from Dailyorders where
	odate=’1990-10-03’;
==> 	Not updatable

	#4 Create view Nullcities
	as Select snum, sname, city
	from Salespeople
	where city is NULL
	OR sname BETWEEN ‘A’ and ‘MZ’;
==>	Yes
--------------------------------------------------------------------------------------------
Q2. Create a view of the Salespeople table called Commissions. This view will include
    only the snum and comm fields. Through this view, someone could enter or change
    commissions, but only to values between .10 and .20.

mysql> create view commissions
    -> as
    -> select Snum,Comm
    -> from salespeople
    -> where comm between .10 and .20  with  check option;
Query OK, 0 rows affected (0.07 sec)

mysql> update commissions
    -> set comm = 0.22
    -> where snum = 1003;
ERROR 1369 (HY000): CHECK OPTION failed 'dbt.commissions'
----------------------------------------------------------------------------------------

Q3. Some SQL implementations have a built-in constant representing the current date,
    sometimes called “CURDATE” or “SYSDATE”. The word SYSDATE can
    therefore be used in a SQL statement, and be replaced by the current date when the
    value is accessed by commands such as Select or Insert. We will use a view of the
    Orders table called Entryorders to insert rows into the Orders table. Create the
    Orders table, so that SYSDATE is automatically inserted for odate if no value is
    given. Then create the Entryorders view so that no values can be given.

CREATE TABLE IF NOT EXISTS ORDERS_4
(
Onum INT(4),
Amt FLOAT(7,2),
Odate DATE default sysdate()
Cnum INT(4),
Snum INT(4)
);

create view Entryorders as 
select * from ORDERS_4;
---------------------------------------------------------------------------------------------



















 